trigger:
  branches:
    include:
      - main
  paths:
    include:
      - infrastructure/*
      - pipelines/infrastructure-pipeline.yml

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: environmentName
    displayName: 'Environment Name'
    type: string
    default: 'dev'
    values:
      - dev
      - test
      - prod
  
  - name: location
    displayName: 'Azure Region'
    type: string
    default: 'eastus2'
    values:
      - eastus
      - westus
      - centralus
      - eastus2
      - westeurope
      - northeurope

  - name: appServicePlanSku
    displayName: 'App Service Plan SKU'
    type: string
    default: 'B1'
    values:
      - B1
      - B2
      - S1
      - P1V2

variables:
  - name: resourceGroupName
    value: 'weather-app-${{ parameters.environmentName }}-rg'
  - name: appServicePlanName
    value: 'weather-app-${{ parameters.environmentName }}-plan'
  - name: backendAppName
    value: 'weather-app-${{ parameters.environmentName }}-api'
  - name: frontendAppName
    value: 'weather-app-${{ parameters.environmentName }}-web'

stages:
  - stage: Provision
    displayName: 'Provision Azure Resources'
    jobs:
      - job: CreateResourceGroup
        displayName: 'Create Resource Group'
        steps:
          - task: AzureCLI@2
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking if resource group exists: $(resourceGroupName)"
                
                # Check if resource group exists
                if az group exists --name $(resourceGroupName) --query exists -o tsv | grep -q "true"; then
                  echo "Resource group $(resourceGroupName) already exists. Skipping creation."
                else
                  echo "Creating resource group: $(resourceGroupName)"
                  az group create --name $(resourceGroupName) --location ${{ parameters.location }}
                  echo "Resource group $(resourceGroupName) created successfully."
                fi

      - job: CreateAppServicePlan
        displayName: 'Create App Service Plan'
        dependsOn: CreateResourceGroup
        steps:
          - task: AzureCLI@2
            displayName: 'Create App Service Plan'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking if App Service Plan exists: $(appServicePlanName)"
                
                # Check if App Service Plan exists
                if az appservice plan show --name $(appServicePlanName) --resource-group $(resourceGroupName) --query name -o tsv 2>/dev/null; then
                  echo "App Service Plan $(appServicePlanName) already exists. Skipping creation."
                else
                  echo "Creating App Service Plan: $(appServicePlanName)"
                  az appservice plan create \
                    --name $(appServicePlanName) \
                    --resource-group $(resourceGroupName) \
                    --location ${{ parameters.location }} \
                    --sku ${{ parameters.appServicePlanSku }} \
                    --is-linux
                  echo "App Service Plan $(appServicePlanName) created successfully."
                fi

      - job: CreateWebApps
        displayName: 'Create Web Apps'
        dependsOn: CreateAppServicePlan
        steps:
          - task: AzureCLI@2
            displayName: 'Create Backend Web App'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking if Backend Web App exists: $(backendAppName)"
                
                # Check if Backend Web App exists
                if az webapp show --name $(backendAppName) --resource-group $(resourceGroupName) --query name -o tsv 2>/dev/null; then
                  echo "Backend Web App $(backendAppName) already exists. Skipping creation."
                else
                  echo "Creating Backend Web App: $(backendAppName)"
                  az webapp create \
                    --name $(backendAppName) \
                    --resource-group $(resourceGroupName) \
                    --plan $(appServicePlanName) \
                    --runtime "DOTNETCORE|6.0"
                  echo "Backend Web App $(backendAppName) created successfully."
                fi
                
                echo "Configuring app settings for Backend Web App"
                # Configure app settings (always update settings to ensure they're correct)
                az webapp config appsettings set \
                  --name $(backendAppName) \
                  --resource-group $(resourceGroupName) \
                  --settings \
                    ASPNETCORE_ENVIRONMENT=Production \
                    WEBSITE_RUN_FROM_PACKAGE=1
                echo "App settings for Backend Web App configured successfully."

          - task: AzureCLI@2
            displayName: 'Create Frontend Web App'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking if Frontend Web App exists: $(frontendAppName)"
                
                # Check if Frontend Web App exists
                if az webapp show --name $(frontendAppName) --resource-group $(resourceGroupName) --query name -o tsv 2>/dev/null; then
                  echo "Frontend Web App $(frontendAppName) already exists. Skipping creation."
                else
                  echo "Creating Frontend Web App: $(frontendAppName)"
                  az webapp create \
                    --name $(frontendAppName) \
                    --resource-group $(resourceGroupName) \
                    --plan $(appServicePlanName) \
                    --runtime "NODE|16-lts"
                  echo "Frontend Web App $(frontendAppName) created successfully."
                fi
                
                echo "Configuring app settings for Frontend Web App"
                # Configure app settings (always update settings to ensure they're correct)
                az webapp config appsettings set \
                  --name $(frontendAppName) \
                  --resource-group $(resourceGroupName) \
                  --settings \
                    SCM_DO_BUILD_DURING_DEPLOYMENT=true \
                    WEBSITE_RUN_FROM_PACKAGE=1 \
                    API_URL=https://$(backendAppName).azurewebsites.net
                echo "App settings for Frontend Web App configured successfully."

  - stage: Verify
    displayName: 'Verify Deployment'
    dependsOn: Provision
    jobs:
      - job: VerifyResources
        displayName: 'Verify Azure Resources'
        steps:
          - task: AzureCLI@2
            displayName: 'Verify Resource Group and Services'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Verifying resource group: $(resourceGroupName)"
                az group show --name $(resourceGroupName)
                
                echo "Verifying backend app service: $(backendAppName)"
                az webapp show --resource-group $(resourceGroupName) --name $(backendAppName) --query "{name:name,state:state,hostNames:hostNames}" -o table
                
                echo "Verifying frontend app service: $(frontendAppName)"
                az webapp show --resource-group $(resourceGroupName) --name $(frontendAppName) --query "{name:name,state:state,hostNames:hostNames}" -o table
                
                # Output the URLs for reference
                echo "Backend URL: https://$(backendAppName).azurewebsites.net"
                echo "Frontend URL: https://$(frontendAppName).azurewebsites.net"
                
                # Store the URLs as pipeline variables
                echo "##vso[task.setvariable variable=backendUrl;isOutput=true]https://$(backendAppName).azurewebsites.net"
                echo "##vso[task.setvariable variable=frontendUrl;isOutput=true]https://$(frontendAppName).azurewebsites.net"
